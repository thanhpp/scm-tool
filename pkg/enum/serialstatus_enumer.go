// Code generated by "enumer -type=SerialStatus -linecomment -json=true -sql=true"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SerialStatusName = "SerialStatusNewSerialStatusSold"

var _SerialStatusIndex = [...]uint8{0, 15, 31}

const _SerialStatusLowerName = "serialstatusnewserialstatussold"

func (i SerialStatus) String() string {
	i -= 1
	if i < 0 || i >= SerialStatus(len(_SerialStatusIndex)-1) {
		return fmt.Sprintf("SerialStatus(%d)", i+1)
	}
	return _SerialStatusName[_SerialStatusIndex[i]:_SerialStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SerialStatusNoOp() {
	var x [1]struct{}
	_ = x[SerialStatusNew-(1)]
	_ = x[SerialStatusSold-(2)]
}

var _SerialStatusValues = []SerialStatus{SerialStatusNew, SerialStatusSold}

var _SerialStatusNameToValueMap = map[string]SerialStatus{
	_SerialStatusName[0:15]:       SerialStatusNew,
	_SerialStatusLowerName[0:15]:  SerialStatusNew,
	_SerialStatusName[15:31]:      SerialStatusSold,
	_SerialStatusLowerName[15:31]: SerialStatusSold,
}

var _SerialStatusNames = []string{
	_SerialStatusName[0:15],
	_SerialStatusName[15:31],
}

// SerialStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SerialStatusString(s string) (SerialStatus, error) {
	if val, ok := _SerialStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SerialStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SerialStatus values", s)
}

// SerialStatusValues returns all values of the enum
func SerialStatusValues() []SerialStatus {
	return _SerialStatusValues
}

// SerialStatusStrings returns a slice of all String values of the enum
func SerialStatusStrings() []string {
	strs := make([]string, len(_SerialStatusNames))
	copy(strs, _SerialStatusNames)
	return strs
}

// IsASerialStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SerialStatus) IsASerialStatus() bool {
	for _, v := range _SerialStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SerialStatus
func (i SerialStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SerialStatus
func (i *SerialStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SerialStatus should be a string, got %s", data)
	}

	var err error
	*i, err = SerialStatusString(s)
	return err
}

func (i SerialStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SerialStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SerialStatus: %[1]T(%[1]v)", value)
	}

	val, err := SerialStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
