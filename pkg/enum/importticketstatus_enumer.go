// Code generated by "enumer -type=ImportTicketStatus -linecomment -json=true -sql=true"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ImportTicketStatusName = "ImportTicketStatusNewImportTicketStatusDone"

var _ImportTicketStatusIndex = [...]uint8{0, 21, 43}

const _ImportTicketStatusLowerName = "importticketstatusnewimportticketstatusdone"

func (i ImportTicketStatus) String() string {
	i -= 1
	if i < 0 || i >= ImportTicketStatus(len(_ImportTicketStatusIndex)-1) {
		return fmt.Sprintf("ImportTicketStatus(%d)", i+1)
	}
	return _ImportTicketStatusName[_ImportTicketStatusIndex[i]:_ImportTicketStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ImportTicketStatusNoOp() {
	var x [1]struct{}
	_ = x[ImportTicketStatusNew-(1)]
	_ = x[ImportTicketStatusDone-(2)]
}

var _ImportTicketStatusValues = []ImportTicketStatus{ImportTicketStatusNew, ImportTicketStatusDone}

var _ImportTicketStatusNameToValueMap = map[string]ImportTicketStatus{
	_ImportTicketStatusName[0:21]:       ImportTicketStatusNew,
	_ImportTicketStatusLowerName[0:21]:  ImportTicketStatusNew,
	_ImportTicketStatusName[21:43]:      ImportTicketStatusDone,
	_ImportTicketStatusLowerName[21:43]: ImportTicketStatusDone,
}

var _ImportTicketStatusNames = []string{
	_ImportTicketStatusName[0:21],
	_ImportTicketStatusName[21:43],
}

// ImportTicketStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImportTicketStatusString(s string) (ImportTicketStatus, error) {
	if val, ok := _ImportTicketStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ImportTicketStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImportTicketStatus values", s)
}

// ImportTicketStatusValues returns all values of the enum
func ImportTicketStatusValues() []ImportTicketStatus {
	return _ImportTicketStatusValues
}

// ImportTicketStatusStrings returns a slice of all String values of the enum
func ImportTicketStatusStrings() []string {
	strs := make([]string, len(_ImportTicketStatusNames))
	copy(strs, _ImportTicketStatusNames)
	return strs
}

// IsAImportTicketStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImportTicketStatus) IsAImportTicketStatus() bool {
	for _, v := range _ImportTicketStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ImportTicketStatus
func (i ImportTicketStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ImportTicketStatus
func (i *ImportTicketStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ImportTicketStatus should be a string, got %s", data)
	}

	var err error
	*i, err = ImportTicketStatusString(s)
	return err
}

func (i ImportTicketStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ImportTicketStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ImportTicketStatus: %[1]T(%[1]v)", value)
	}

	val, err := ImportTicketStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
