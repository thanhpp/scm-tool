// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thanhpp/scm/ent/item"
	"github.com/thanhpp/scm/ent/predicate"
	"github.com/thanhpp/scm/ent/serial"
	"github.com/thanhpp/scm/ent/storage"
)

// SerialUpdate is the builder for updating Serial entities.
type SerialUpdate struct {
	config
	hooks    []Hook
	mutation *SerialMutation
}

// Where appends a list predicates to the SerialUpdate builder.
func (su *SerialUpdate) Where(ps ...predicate.Serial) *SerialUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SerialUpdate) SetUpdateTime(t time.Time) *SerialUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetStorageID sets the "storage_id" field.
func (su *SerialUpdate) SetStorageID(u uuid.UUID) *SerialUpdate {
	su.mutation.SetStorageID(u)
	return su
}

// SetItemID sets the "item_id" field.
func (su *SerialUpdate) SetItemID(u uuid.UUID) *SerialUpdate {
	su.mutation.SetItemID(u)
	return su
}

// SetItem sets the "item" edge to the Item entity.
func (su *SerialUpdate) SetItem(i *Item) *SerialUpdate {
	return su.SetItemID(i.ID)
}

// SetStorage sets the "storage" edge to the Storage entity.
func (su *SerialUpdate) SetStorage(s *Storage) *SerialUpdate {
	return su.SetStorageID(s.ID)
}

// Mutation returns the SerialMutation object of the builder.
func (su *SerialUpdate) Mutation() *SerialMutation {
	return su.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (su *SerialUpdate) ClearItem() *SerialUpdate {
	su.mutation.ClearItem()
	return su
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (su *SerialUpdate) ClearStorage() *SerialUpdate {
	su.mutation.ClearStorage()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SerialUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SerialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SerialUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SerialUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SerialUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SerialUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := serial.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SerialUpdate) check() error {
	if _, ok := su.mutation.ItemID(); su.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Serial.item"`)
	}
	if _, ok := su.mutation.StorageID(); su.mutation.StorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Serial.storage"`)
	}
	return nil
}

func (su *SerialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serial.Table,
			Columns: serial.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: serial.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serial.FieldUpdateTime,
		})
	}
	if su.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.ItemTable,
			Columns: []string{serial.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.ItemTable,
			Columns: []string{serial.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.StorageTable,
			Columns: []string{serial.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.StorageTable,
			Columns: []string{serial.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SerialUpdateOne is the builder for updating a single Serial entity.
type SerialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SerialMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SerialUpdateOne) SetUpdateTime(t time.Time) *SerialUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetStorageID sets the "storage_id" field.
func (suo *SerialUpdateOne) SetStorageID(u uuid.UUID) *SerialUpdateOne {
	suo.mutation.SetStorageID(u)
	return suo
}

// SetItemID sets the "item_id" field.
func (suo *SerialUpdateOne) SetItemID(u uuid.UUID) *SerialUpdateOne {
	suo.mutation.SetItemID(u)
	return suo
}

// SetItem sets the "item" edge to the Item entity.
func (suo *SerialUpdateOne) SetItem(i *Item) *SerialUpdateOne {
	return suo.SetItemID(i.ID)
}

// SetStorage sets the "storage" edge to the Storage entity.
func (suo *SerialUpdateOne) SetStorage(s *Storage) *SerialUpdateOne {
	return suo.SetStorageID(s.ID)
}

// Mutation returns the SerialMutation object of the builder.
func (suo *SerialUpdateOne) Mutation() *SerialMutation {
	return suo.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (suo *SerialUpdateOne) ClearItem() *SerialUpdateOne {
	suo.mutation.ClearItem()
	return suo
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (suo *SerialUpdateOne) ClearStorage() *SerialUpdateOne {
	suo.mutation.ClearStorage()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SerialUpdateOne) Select(field string, fields ...string) *SerialUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Serial entity.
func (suo *SerialUpdateOne) Save(ctx context.Context) (*Serial, error) {
	var (
		err  error
		node *Serial
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SerialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SerialUpdateOne) SaveX(ctx context.Context) *Serial {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SerialUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SerialUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SerialUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := serial.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SerialUpdateOne) check() error {
	if _, ok := suo.mutation.ItemID(); suo.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Serial.item"`)
	}
	if _, ok := suo.mutation.StorageID(); suo.mutation.StorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Serial.storage"`)
	}
	return nil
}

func (suo *SerialUpdateOne) sqlSave(ctx context.Context) (_node *Serial, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serial.Table,
			Columns: serial.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: serial.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Serial.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serial.FieldID)
		for _, f := range fields {
			if !serial.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serial.FieldUpdateTime,
		})
	}
	if suo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.ItemTable,
			Columns: []string{serial.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.ItemTable,
			Columns: []string{serial.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.StorageTable,
			Columns: []string{serial.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.StorageTable,
			Columns: []string{serial.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Serial{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
