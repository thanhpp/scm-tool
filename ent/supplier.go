// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thanhpp/scm/ent/supplier"
)

// Supplier is the model entity for the Supplier schema.
type Supplier struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Supplier) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case supplier.FieldName, supplier.FieldPhone, supplier.FieldEmail:
			values[i] = new(sql.NullString)
		case supplier.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Supplier", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Supplier fields.
func (s *Supplier) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case supplier.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case supplier.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case supplier.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				s.Phone = value.String
			}
		case supplier.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				s.Email = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Supplier.
// Note that you need to call Supplier.Unwrap() before calling this method if this Supplier
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Supplier) Update() *SupplierUpdateOne {
	return (&SupplierClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Supplier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Supplier) Unwrap() *Supplier {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Supplier is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Supplier) String() string {
	var builder strings.Builder
	builder.WriteString("Supplier(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", phone=")
	builder.WriteString(s.Phone)
	builder.WriteString(", email=")
	builder.WriteString(s.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Suppliers is a parsable slice of Supplier.
type Suppliers []*Supplier

func (s Suppliers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
