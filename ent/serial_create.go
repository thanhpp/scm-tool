// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thanhpp/scm/ent/item"
	"github.com/thanhpp/scm/ent/serial"
	"github.com/thanhpp/scm/ent/storage"
)

// SerialCreate is the builder for creating a Serial entity.
type SerialCreate struct {
	config
	mutation *SerialMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *SerialCreate) SetCreateTime(t time.Time) *SerialCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SerialCreate) SetNillableCreateTime(t *time.Time) *SerialCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SerialCreate) SetUpdateTime(t time.Time) *SerialCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SerialCreate) SetNillableUpdateTime(t *time.Time) *SerialCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetStorageID sets the "storage_id" field.
func (sc *SerialCreate) SetStorageID(u uuid.UUID) *SerialCreate {
	sc.mutation.SetStorageID(u)
	return sc
}

// SetItemID sets the "item_id" field.
func (sc *SerialCreate) SetItemID(u uuid.UUID) *SerialCreate {
	sc.mutation.SetItemID(u)
	return sc
}

// SetID sets the "id" field.
func (sc *SerialCreate) SetID(s string) *SerialCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetItem sets the "item" edge to the Item entity.
func (sc *SerialCreate) SetItem(i *Item) *SerialCreate {
	return sc.SetItemID(i.ID)
}

// SetStorage sets the "storage" edge to the Storage entity.
func (sc *SerialCreate) SetStorage(s *Storage) *SerialCreate {
	return sc.SetStorageID(s.ID)
}

// Mutation returns the SerialMutation object of the builder.
func (sc *SerialCreate) Mutation() *SerialMutation {
	return sc.mutation
}

// Save creates the Serial in the database.
func (sc *SerialCreate) Save(ctx context.Context) (*Serial, error) {
	var (
		err  error
		node *Serial
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SerialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SerialCreate) SaveX(ctx context.Context) *Serial {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SerialCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SerialCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SerialCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := serial.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := serial.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SerialCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Serial.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Serial.update_time"`)}
	}
	if _, ok := sc.mutation.StorageID(); !ok {
		return &ValidationError{Name: "storage_id", err: errors.New(`ent: missing required field "Serial.storage_id"`)}
	}
	if _, ok := sc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "Serial.item_id"`)}
	}
	if _, ok := sc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item", err: errors.New(`ent: missing required edge "Serial.item"`)}
	}
	if _, ok := sc.mutation.StorageID(); !ok {
		return &ValidationError{Name: "storage", err: errors.New(`ent: missing required edge "Serial.storage"`)}
	}
	return nil
}

func (sc *SerialCreate) sqlSave(ctx context.Context) (*Serial, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Serial.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (sc *SerialCreate) createSpec() (*Serial, *sqlgraph.CreateSpec) {
	var (
		_node = &Serial{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: serial.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: serial.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serial.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serial.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := sc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.ItemTable,
			Columns: []string{serial.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serial.StorageTable,
			Columns: []string{serial.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StorageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SerialCreateBulk is the builder for creating many Serial entities in bulk.
type SerialCreateBulk struct {
	config
	builders []*SerialCreate
}

// Save creates the Serial entities in the database.
func (scb *SerialCreateBulk) Save(ctx context.Context) ([]*Serial, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Serial, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SerialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SerialCreateBulk) SaveX(ctx context.Context) []*Serial {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SerialCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SerialCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
