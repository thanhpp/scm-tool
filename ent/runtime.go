// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/thanhpp/scm/ent/item"
	"github.com/thanhpp/scm/ent/schema"
	"github.com/thanhpp/scm/ent/serial"
	"github.com/thanhpp/scm/ent/storage"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	itemMixin := schema.Item{}.Mixin()
	itemMixinFields0 := itemMixin[0].Fields()
	_ = itemMixinFields0
	itemFields := schema.Item{}.Fields()
	_ = itemFields
	// itemDescCreateTime is the schema descriptor for create_time field.
	itemDescCreateTime := itemMixinFields0[0].Descriptor()
	// item.DefaultCreateTime holds the default value on creation for the create_time field.
	item.DefaultCreateTime = itemDescCreateTime.Default.(func() time.Time)
	// itemDescUpdateTime is the schema descriptor for update_time field.
	itemDescUpdateTime := itemMixinFields0[1].Descriptor()
	// item.DefaultUpdateTime holds the default value on creation for the update_time field.
	item.DefaultUpdateTime = itemDescUpdateTime.Default.(func() time.Time)
	// item.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	item.UpdateDefaultUpdateTime = itemDescUpdateTime.UpdateDefault.(func() time.Time)
	// itemDescSku is the schema descriptor for sku field.
	itemDescSku := itemFields[1].Descriptor()
	// item.SkuValidator is a validator for the "sku" field. It is called by the builders before save.
	item.SkuValidator = itemDescSku.Validators[0].(func(string) error)
	// itemDescSellPrice is the schema descriptor for sell_price field.
	itemDescSellPrice := itemFields[3].Descriptor()
	// item.SellPriceValidator is a validator for the "sell_price" field. It is called by the builders before save.
	item.SellPriceValidator = itemDescSellPrice.Validators[0].(func(float64) error)
	serialMixin := schema.Serial{}.Mixin()
	serialMixinFields0 := serialMixin[0].Fields()
	_ = serialMixinFields0
	serialFields := schema.Serial{}.Fields()
	_ = serialFields
	// serialDescCreateTime is the schema descriptor for create_time field.
	serialDescCreateTime := serialMixinFields0[0].Descriptor()
	// serial.DefaultCreateTime holds the default value on creation for the create_time field.
	serial.DefaultCreateTime = serialDescCreateTime.Default.(func() time.Time)
	// serialDescUpdateTime is the schema descriptor for update_time field.
	serialDescUpdateTime := serialMixinFields0[1].Descriptor()
	// serial.DefaultUpdateTime holds the default value on creation for the update_time field.
	serial.DefaultUpdateTime = serialDescUpdateTime.Default.(func() time.Time)
	// serial.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	serial.UpdateDefaultUpdateTime = serialDescUpdateTime.UpdateDefault.(func() time.Time)
	storageMixin := schema.Storage{}.Mixin()
	storageMixinFields0 := storageMixin[0].Fields()
	_ = storageMixinFields0
	storageFields := schema.Storage{}.Fields()
	_ = storageFields
	// storageDescCreateTime is the schema descriptor for create_time field.
	storageDescCreateTime := storageMixinFields0[0].Descriptor()
	// storage.DefaultCreateTime holds the default value on creation for the create_time field.
	storage.DefaultCreateTime = storageDescCreateTime.Default.(func() time.Time)
	// storageDescUpdateTime is the schema descriptor for update_time field.
	storageDescUpdateTime := storageMixinFields0[1].Descriptor()
	// storage.DefaultUpdateTime holds the default value on creation for the update_time field.
	storage.DefaultUpdateTime = storageDescUpdateTime.Default.(func() time.Time)
	// storage.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	storage.UpdateDefaultUpdateTime = storageDescUpdateTime.UpdateDefault.(func() time.Time)
}
