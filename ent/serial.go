// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thanhpp/scm/ent/item"
	"github.com/thanhpp/scm/ent/serial"
	"github.com/thanhpp/scm/ent/storage"
)

// Serial is the model entity for the Serial schema.
type Serial struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StorageID holds the value of the "storage_id" field.
	StorageID uuid.UUID `json:"storage_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID uuid.UUID `json:"item_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SerialQuery when eager-loading is set.
	Edges SerialEdges `json:"edges"`
}

// SerialEdges holds the relations/edges for other nodes in the graph.
type SerialEdges struct {
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SerialEdges) ItemOrErr() (*Item, error) {
	if e.loadedTypes[0] {
		if e.Item == nil {
			// The edge item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SerialEdges) StorageOrErr() (*Storage, error) {
	if e.loadedTypes[1] {
		if e.Storage == nil {
			// The edge storage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.Storage, nil
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Serial) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case serial.FieldID:
			values[i] = new(sql.NullString)
		case serial.FieldCreatedAt, serial.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case serial.FieldStorageID, serial.FieldItemID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Serial", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Serial fields.
func (s *Serial) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serial.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case serial.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case serial.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case serial.FieldStorageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field storage_id", values[i])
			} else if value != nil {
				s.StorageID = *value
			}
		case serial.FieldItemID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value != nil {
				s.ItemID = *value
			}
		}
	}
	return nil
}

// QueryItem queries the "item" edge of the Serial entity.
func (s *Serial) QueryItem() *ItemQuery {
	return (&SerialClient{config: s.config}).QueryItem(s)
}

// QueryStorage queries the "storage" edge of the Serial entity.
func (s *Serial) QueryStorage() *StorageQuery {
	return (&SerialClient{config: s.config}).QueryStorage(s)
}

// Update returns a builder for updating this Serial.
// Note that you need to call Serial.Unwrap() before calling this method if this Serial
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Serial) Update() *SerialUpdateOne {
	return (&SerialClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Serial entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Serial) Unwrap() *Serial {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Serial is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Serial) String() string {
	var builder strings.Builder
	builder.WriteString("Serial(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", storage_id=")
	builder.WriteString(fmt.Sprintf("%v", s.StorageID))
	builder.WriteString(", item_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ItemID))
	builder.WriteByte(')')
	return builder.String()
}

// Serials is a parsable slice of Serial.
type Serials []*Serial

func (s Serials) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
