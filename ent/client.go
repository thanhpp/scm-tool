// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/thanhpp/scm/ent/migrate"

	"github.com/thanhpp/scm/ent/item"
	"github.com/thanhpp/scm/ent/serial"
	"github.com/thanhpp/scm/ent/storage"
	"github.com/thanhpp/scm/ent/supplier"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Item is the client for interacting with the Item builders.
	Item *ItemClient
	// Serial is the client for interacting with the Serial builders.
	Serial *SerialClient
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
	// Supplier is the client for interacting with the Supplier builders.
	Supplier *SupplierClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Item = NewItemClient(c.config)
	c.Serial = NewSerialClient(c.config)
	c.Storage = NewStorageClient(c.config)
	c.Supplier = NewSupplierClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Item:     NewItemClient(cfg),
		Serial:   NewSerialClient(cfg),
		Storage:  NewStorageClient(cfg),
		Supplier: NewSupplierClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Item:     NewItemClient(cfg),
		Serial:   NewSerialClient(cfg),
		Storage:  NewStorageClient(cfg),
		Supplier: NewSupplierClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Item.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Item.Use(hooks...)
	c.Serial.Use(hooks...)
	c.Storage.Use(hooks...)
	c.Supplier.Use(hooks...)
}

// ItemClient is a client for the Item schema.
type ItemClient struct {
	config
}

// NewItemClient returns a client for the Item from the given config.
func NewItemClient(c config) *ItemClient {
	return &ItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `item.Hooks(f(g(h())))`.
func (c *ItemClient) Use(hooks ...Hook) {
	c.hooks.Item = append(c.hooks.Item, hooks...)
}

// Create returns a create builder for Item.
func (c *ItemClient) Create() *ItemCreate {
	mutation := newItemMutation(c.config, OpCreate)
	return &ItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Item entities.
func (c *ItemClient) CreateBulk(builders ...*ItemCreate) *ItemCreateBulk {
	return &ItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Item.
func (c *ItemClient) Update() *ItemUpdate {
	mutation := newItemMutation(c.config, OpUpdate)
	return &ItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemClient) UpdateOne(i *Item) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItem(i))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemClient) UpdateOneID(id uuid.UUID) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItemID(id))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Item.
func (c *ItemClient) Delete() *ItemDelete {
	mutation := newItemMutation(c.config, OpDelete)
	return &ItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemClient) DeleteOne(i *Item) *ItemDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemClient) DeleteOneID(id uuid.UUID) *ItemDeleteOne {
	builder := c.Delete().Where(item.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemDeleteOne{builder}
}

// Query returns a query builder for Item.
func (c *ItemClient) Query() *ItemQuery {
	return &ItemQuery{
		config: c.config,
	}
}

// Get returns a Item entity by its id.
func (c *ItemClient) Get(ctx context.Context, id uuid.UUID) (*Item, error) {
	return c.Query().Where(item.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemClient) GetX(ctx context.Context, id uuid.UUID) *Item {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItemSerial queries the item_serial edge of a Item.
func (c *ItemClient) QueryItemSerial(i *Item) *SerialQuery {
	query := &SerialQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(serial.Table, serial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.ItemSerialTable, item.ItemSerialColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemClient) Hooks() []Hook {
	return c.hooks.Item
}

// SerialClient is a client for the Serial schema.
type SerialClient struct {
	config
}

// NewSerialClient returns a client for the Serial from the given config.
func NewSerialClient(c config) *SerialClient {
	return &SerialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serial.Hooks(f(g(h())))`.
func (c *SerialClient) Use(hooks ...Hook) {
	c.hooks.Serial = append(c.hooks.Serial, hooks...)
}

// Create returns a create builder for Serial.
func (c *SerialClient) Create() *SerialCreate {
	mutation := newSerialMutation(c.config, OpCreate)
	return &SerialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Serial entities.
func (c *SerialClient) CreateBulk(builders ...*SerialCreate) *SerialCreateBulk {
	return &SerialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Serial.
func (c *SerialClient) Update() *SerialUpdate {
	mutation := newSerialMutation(c.config, OpUpdate)
	return &SerialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SerialClient) UpdateOne(s *Serial) *SerialUpdateOne {
	mutation := newSerialMutation(c.config, OpUpdateOne, withSerial(s))
	return &SerialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SerialClient) UpdateOneID(id string) *SerialUpdateOne {
	mutation := newSerialMutation(c.config, OpUpdateOne, withSerialID(id))
	return &SerialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Serial.
func (c *SerialClient) Delete() *SerialDelete {
	mutation := newSerialMutation(c.config, OpDelete)
	return &SerialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SerialClient) DeleteOne(s *Serial) *SerialDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SerialClient) DeleteOneID(id string) *SerialDeleteOne {
	builder := c.Delete().Where(serial.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SerialDeleteOne{builder}
}

// Query returns a query builder for Serial.
func (c *SerialClient) Query() *SerialQuery {
	return &SerialQuery{
		config: c.config,
	}
}

// Get returns a Serial entity by its id.
func (c *SerialClient) Get(ctx context.Context, id string) (*Serial, error) {
	return c.Query().Where(serial.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SerialClient) GetX(ctx context.Context, id string) *Serial {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItem queries the item edge of a Serial.
func (c *SerialClient) QueryItem(s *Serial) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serial.Table, serial.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serial.ItemTable, serial.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStorage queries the storage edge of a Serial.
func (c *SerialClient) QueryStorage(s *Serial) *StorageQuery {
	query := &StorageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serial.Table, serial.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serial.StorageTable, serial.StorageColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SerialClient) Hooks() []Hook {
	return c.hooks.Serial
}

// StorageClient is a client for the Storage schema.
type StorageClient struct {
	config
}

// NewStorageClient returns a client for the Storage from the given config.
func NewStorageClient(c config) *StorageClient {
	return &StorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storage.Hooks(f(g(h())))`.
func (c *StorageClient) Use(hooks ...Hook) {
	c.hooks.Storage = append(c.hooks.Storage, hooks...)
}

// Create returns a create builder for Storage.
func (c *StorageClient) Create() *StorageCreate {
	mutation := newStorageMutation(c.config, OpCreate)
	return &StorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Storage entities.
func (c *StorageClient) CreateBulk(builders ...*StorageCreate) *StorageCreateBulk {
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Storage.
func (c *StorageClient) Update() *StorageUpdate {
	mutation := newStorageMutation(c.config, OpUpdate)
	return &StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageClient) UpdateOne(s *Storage) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorage(s))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageClient) UpdateOneID(id uuid.UUID) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorageID(id))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Storage.
func (c *StorageClient) Delete() *StorageDelete {
	mutation := newStorageMutation(c.config, OpDelete)
	return &StorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StorageClient) DeleteOne(s *Storage) *StorageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StorageClient) DeleteOneID(id uuid.UUID) *StorageDeleteOne {
	builder := c.Delete().Where(storage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageDeleteOne{builder}
}

// Query returns a query builder for Storage.
func (c *StorageClient) Query() *StorageQuery {
	return &StorageQuery{
		config: c.config,
	}
}

// Get returns a Storage entity by its id.
func (c *StorageClient) Get(ctx context.Context, id uuid.UUID) (*Storage, error) {
	return c.Query().Where(storage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageClient) GetX(ctx context.Context, id uuid.UUID) *Storage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStorageSerial queries the storage_serial edge of a Storage.
func (c *StorageClient) QueryStorageSerial(s *Storage) *SerialQuery {
	query := &SerialQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(serial.Table, serial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, storage.StorageSerialTable, storage.StorageSerialColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StorageClient) Hooks() []Hook {
	return c.hooks.Storage
}

// SupplierClient is a client for the Supplier schema.
type SupplierClient struct {
	config
}

// NewSupplierClient returns a client for the Supplier from the given config.
func NewSupplierClient(c config) *SupplierClient {
	return &SupplierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `supplier.Hooks(f(g(h())))`.
func (c *SupplierClient) Use(hooks ...Hook) {
	c.hooks.Supplier = append(c.hooks.Supplier, hooks...)
}

// Create returns a create builder for Supplier.
func (c *SupplierClient) Create() *SupplierCreate {
	mutation := newSupplierMutation(c.config, OpCreate)
	return &SupplierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Supplier entities.
func (c *SupplierClient) CreateBulk(builders ...*SupplierCreate) *SupplierCreateBulk {
	return &SupplierCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Supplier.
func (c *SupplierClient) Update() *SupplierUpdate {
	mutation := newSupplierMutation(c.config, OpUpdate)
	return &SupplierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SupplierClient) UpdateOne(s *Supplier) *SupplierUpdateOne {
	mutation := newSupplierMutation(c.config, OpUpdateOne, withSupplier(s))
	return &SupplierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SupplierClient) UpdateOneID(id uuid.UUID) *SupplierUpdateOne {
	mutation := newSupplierMutation(c.config, OpUpdateOne, withSupplierID(id))
	return &SupplierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Supplier.
func (c *SupplierClient) Delete() *SupplierDelete {
	mutation := newSupplierMutation(c.config, OpDelete)
	return &SupplierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SupplierClient) DeleteOne(s *Supplier) *SupplierDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SupplierClient) DeleteOneID(id uuid.UUID) *SupplierDeleteOne {
	builder := c.Delete().Where(supplier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SupplierDeleteOne{builder}
}

// Query returns a query builder for Supplier.
func (c *SupplierClient) Query() *SupplierQuery {
	return &SupplierQuery{
		config: c.config,
	}
}

// Get returns a Supplier entity by its id.
func (c *SupplierClient) Get(ctx context.Context, id uuid.UUID) (*Supplier, error) {
	return c.Query().Where(supplier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SupplierClient) GetX(ctx context.Context, id uuid.UUID) *Supplier {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SupplierClient) Hooks() []Hook {
	return c.hooks.Supplier
}
